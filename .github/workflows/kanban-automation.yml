name: Move Issue to In Progress in Project Next-gen when PR is opened

on:
  pull_request:
    types: [opened, ready_for_review]

jobs:
  move-issue-in-project:
    runs-on: ubuntu-latest
    steps:
      - name: Extract referenced issues from PR body
        id: extract_issues
        uses: actions/github-script@v7
        with:
          script: |
            const prBody = context.payload.pull_request.body || '';
            const issueNumbers = [...prBody.matchAll(/#(\d+)/g)].map(m => m[1]);
            core.setOutput('issues', JSON.stringify(issueNumbers));

      - name: Move issues in Project Next-gen
        if: steps.extract_issues.outputs.issues != '[]'
        env:
          GH_TOKEN: ${{ secrets.PROJECTS_TOKEN }}
        run: |
          echo "${{ steps.extract_issues.outputs.issues }}" > issue_numbers.json
          node <<'EOF'
          const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
          const fs = require('fs');
          const issues = JSON.parse(fs.readFileSync('issue_numbers.json'));
          if (!issues.length) { process.exit(0); }
          const projectId = "PVT_kwHOBov9rM4A5AKh";
          const statusFieldId = "PVTSSF_lAHOBov9rM4A5AKhzgt3_L0";
          const inProgressOptionId = "47fc9ee4";

          async function run() {
            for (const issueNumber of issues) {
              // Busca el node_id del issue
              let res = await fetch(`https://api.github.com/repos/${process.env.GITHUB_REPOSITORY}/issues/${issueNumber}`, {
                headers: { Authorization: `Bearer ${process.env.GH_TOKEN}` }
              });
              const issue = await res.json();
              const contentId = issue.node_id;
              // Busca el item en el project
              const query = `
                query {
                  projectV2(id: "${projectId}") {
                    items(first: 100, orderBy: {field: CREATED_AT, direction: DESC}) {
                      nodes {
                        id
                        content {
                          ... on Issue { id number }
                        }
                      }
                    }
                  }
                }`;
              res = await fetch('https://api.github.com/graphql', {
                method: 'POST',
                headers: {
                  Authorization: `Bearer ${process.env.GH_TOKEN}`,
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ query })
              });
              const data = await res.json();
              const item = data.data.projectV2.items.nodes.find(n => n.content && n.content.number == issueNumber);
              if (!item) { console.log(`Issue #${issueNumber} no est√° en el proyecto`); continue; }
              // Actualiza el campo Status a "In Progress"
              const mutation = `
                mutation {
                  updateProjectV2ItemFieldValue(
                    input: {
                      projectId: "${projectId}"
                      itemId: "${item.id}"
                      fieldId: "${statusFieldId}"
                      value: { singleSelectOptionId: "${inProgressOptionId}" }
                    }
                  ) { projectV2Item { id } }
                }
              `;
              await fetch('https://api.github.com/graphql', {
                method: 'POST',
                headers: {
                  Authorization: `Bearer ${process.env.GH_TOKEN}`,
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ query: mutation })
              });
              console.log(`Issue #${issueNumber} movido a In Progress`);
            }
          }
          run();
          EOF